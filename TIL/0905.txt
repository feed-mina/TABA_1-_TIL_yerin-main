
09시 30분 도착

DB. 
2002 추세
관계형 DB 가 1위 - 오라클,마이SQL
MYSQL - 에서 MY와 MariaDB에서 Marida는 아들과 딸의 이름을 따아서 지은 유래가 있다~

DB에서 중요한 키워드 **
튜링 , 스케마 , 데이터

한국에서도 디스크 중심 DB, 메모리 중심 DB가 만들어졌다.
Tibero - 최초로 디스크 중심 DB
메모리 중심 DB는 처리속도가 훨씬 빠르다

### 10시 30분 - 12시
### 1장 데이터베이스 개요
### 데이터베이스 정의 : (응용)데이터의 집합
- 인사고과에 관한 데이터 : 인사관리 , 회계관리 , 계정관리, 수강신청수
### 공유하기 위한 데이터 집합이다
### 디비에서의 공유는 공통공유이다. concurrent sharing ex) ATM 5대를 다같이 사용할때
### self-descriginb collection of data
디비 구조정보도 디비에 들어있다.  데이터와 스키마를 모두 보유 메타데이터도 같이 보유함

### databasedata help people track things of interst to then

### tables 데이터는 테이블 별로 저장을 한다 테이블은 행과열단위로 구조가 되어있다
각 테이블은 다른 내용에 대해 저장을한다. 
### instance : 행 하나 하나를 의미 

### relations 데이터베이스는 데이터와 관계를 저장한다
er모드에서 relationship : 학생, 과목 , 학생과 과목의 관계 

### 컬럼이름은 첫글자만 대문자 뒤에는 소문자
대소문자가 섞어있으면 컬럼이름
대문자만있으면 테이블 이름

### 정보처리기사 - 데이터를 프로세싱해서 시험보는 자격증
### crm - people soft 회사가 유명하다
트랜잭션 ACID
Actomic 원자성
하나의 select문 안에 두개의 모두 실행이 되엉 한다. 하나가 안될때 두개 모두 안된다.
예를 들면 계좌이체일때, A계정 - B계정 -100 만원 + 100만원 
// 안될때 롤백으로 처리를 해준다.

C consistendce 일관성 
I indepentant 분리성
D durablity : 영속성

### 기존 디비가 지원하는 acid는 지원이 불가능하다
### 몽고 db, 카산드라 - no SQL : not only sql
sql지원을 하기도 하고 안하기도 한다
새로나온 빅데이터는 sql을 옵션으로 선택할 수도 있다
데이터마이닝 : 데이터를 분석해서 직역하는 기술
AI기술과 80%와 일치하는것 같다
비즈니스 분석 : ,애널리시틱 
온라인트렉젝션피팅 : 
OAP

OLPT

동시에 처리하는건 Hybrid - OAP , OLPT을 동시에 지원
OLTP :최초의 transtion은 비행기사에서 일어났다. 
예시)
은행에서 ATM에서 돈을 5명이 한꺼번에 찾는다 

DW(Data wharehouse) 현재 + 과거데이터
OLAP (OnLine Analytics PRocessigng)
DW : 과거데이터 : historical data까지 전부 저장

OLAP 데이터마이니에서 돌아가는 트렉젝션 하나
componsnts of a Database System                    ⇒ Database

DMSA - 데이터베이스를 생성하거나 수정한다.

Create / Process / AMdinister

db엔진을 통해서 앞단의 데이터베이스를 해석한다.

전1-12PAGE 전체를 데이터베이스 프로새스
각 가정을 데이터 시스탬의 컴퓨넌트라고 본다.

users는 데이터베이스가 들어가기도 하고 안들어가기도 한다.
application은 db엔진과 차이가 없다. 별개라고 본다.

대표적인 질의어 SQL
SEQUEL (씨퀄~)
유시버클리 =QUEL / 아이비리그 = QBE / HiveQL
그래프db는 GAQL 

### 관계DB만 SQL이라고 한다.
DBMS 성능에 따라 3개로 나눈다.
High end 고성능 
Mid range
Low end

30286 3086을 통팅 x (???)

언더스텐딩 sQL
sql을 표준안이라서 따로 정리하는것이 필요하다

테이블으 만드는 문장
CREATE TABLE
ALTER TABLE 

직원이름을 8바이트에서 50바이트로 만드는건
db를 다시 만들어야 한다.

alter table : alter table com
alter column 

DBA가 할일을 DB엔진이 한다
사람이 메뉴얼하하는걸 db엔진이 하게 된다.
sql표준안이 몇년도 베이직인지/이넡/하이ㅣㄴ지에 따라 지원기능이 다르다
지원기능에 따라서 dba구조를 편리성이 높아진다

DB에서는 성능단위 : 트렉직션을 이용한다
AUW
LUW logical unit work

총 몇개 트렉젝션인가

TPC사이트,db-Engine browsers사이트 를 들어가면 최신정보를 알 수 있다.


### 
banchmark 

최근에는 c트렉젝션을 많이 사용한다.

골디락스가 tpc밴치마크를 땄다
tpc밴치마킹을 하고 있다

tpc사이트에 들어가면 측정할수있는 셈플 코드, document들이 있다. 확인해보기

tp모니터 : 티맥스 : transition maximum 을 의미한다

(ttc-c??? 가 뭘까)

한트렉젝션 tpa당 돈과 전력이 얼마나 드는가
tpc공인을 받았다는건 국제적으로 보장을 한다.는 의미이다.
리커버리 기능도 완벽하게 수행해야 한다

interactive sql
database application ⇒ sql ⇒ dBMS

데이터베이스 어플리케이션 역할 :
FORM을 만들고 처리하고 user query를 던진다
출력처리한다. 에플리케이션 로직을 실행한다

sql문을 던지는 화면 - queries
질의 자체를 주고 받는 query

database-reports

input/output 동시에 form
read-only는 reports

DBMS  디비 구조를 고친다.

무결성 규칙 - intergrege 규칙

인테그리트 - data의 collectriost를 의미한다

concuresinty control 

동시 공유하므로써 오류가 나지 않도록 한다

security - insert read update read

데이터이 날조를 하지 못하도록 하는 것이 provice security
//

DBMS 의 기능**
정의 , 조작 , 제어 
정의기능
CREATE TABLE 정의
조작기능
RETRIVAL 검색
INSERTION 새로운 행 삽입
DELETION 삭제
UPDATE 업데이트

제어기능 DBMS의 고급기능
RECOVERY
병행제어 -concrency
보안기능
intergrete 무결성 *결함이 없다 - 데이터가 correct하다. 정확도가 높아진다

현실데이터의 반영을 하지 못했다. 무결성하지 않다.  : durty data , incorect data
data cleansing 을 하다 - 데이터를 올바르게 고치다
intergrity = 코렉트릭스랑 같은 의미이다.

스스로를 기술하는 collection if intergred
통합된 테이블에 데이터를 저장하다. self-describe하다
스키마 : 자기 자신에 대한 정보 : self -describing

데이터와 스키마 예시 : 시스템 테이블을 스키마라고도 한다

예를들어 세 테이블의 구조, db의 어떤 데이터가 있는지 , 기본키는 무엇인지 primitive key
student + grade : 복합키
대쉬멀이코노미 - 소수점 두자리 인데 한자리로 한다
8콤마2 몇달러 몇센트 , 센트까지 표시가능

c -칼럼즈 / c-xpdlqmf: self - 메타데이터를 저장하는 테이블시스템 카탈로그라고도 한다

시스템 카탈로그가 시스템 테이블이 모여져있다
sysindexes : 테이블만 만들면 안돼고 튜닝에 index정보를 제공한다. index튜닝을 가능하게 한다


tables of user data
Metadata
Indexes - 데이터를 쓰는 이유는 index때문에 , (binary search, C-equarls-sorting) 
인덱스는 주로 B tree를 많이 쓴다. p값을 가지고 원하는 값을 찾는다.
table에 메모리와 디스크를 왔다갔다하면서 블록이 생긴다.(os에서 frame이랑 비슷)
디스크에서 메모리를 꺼낼때 블록수가 한 블록이 보통 2k바이트 , 4k바이트로 있다
index높이는 log nn으로 많이 표시한다.
트리의 자식수가 n이다. 보통 시뮬리레이션할때 n = 100 한다. log 100 5천만 : 트리 높이
인덱스 블록을 4,5번정도하면 디스크 값을 알 수 있다.
한 블록을 ㅇ ㅣㄺ느데 평균 10ms 정도 걸린다. 

overhead - 부담되는 데이터
index가 있어야만 빠른 검색이 되지만 index가 용량을 많이 차지한다. (data보다 index가 더 많이 용량이 들때도 있다)
ㅇ인덱스는 반드시 있어야 한다. 인덱스가 있기때문에 db가 존재한만큼

db안에 squl , plsql을 배울예정
프로시듀어 sql :
data언어를 프로그래밍 언어처럼 확장한다 -> 절차적 sql : plsql

선언적 sql 와 plsql을 알아야 한다.

db server : 일반적으로 db섭버, 티베로나 오라클 설치하고
윗칸에 웹서버 설치하고was 서버 - app application server애플리케이션 로직
 운영프로그램 로직은 was서버에서 돌린다.

 웹서버 - sas서버 = dbserver 왓다가싸하며 트렉젝션들이 생긴다
 자주실행하는 비즈니스 로직은 db안에 넎는다.
 일부 운영프로그램 조각은 비즈니스 로직이라고도 한다. : store procedures

 Triggers : 자동실행 프로그램 ** 
 좋은점은 ex) 의류매장일 경우 제고가 3개정도밖에 없을때 Trigger이  파악하고 준비한다.
 어떤 조건이 만족디며느 DBMS가 잘못 힐행하면 고치 아프다.

 Trigger을 통히 디비 연동을 한다.
 Triggers 대신에 링클연결을 돕기도 한다.
 권한부여 정보

 DB의 전형적인 structure ㅜㄱ조
 유저 데이터 화면
 신랑 사진촬영 / sql왓다갔다 짐 ㅇ록ㅁ기기

 access ** low end product 


Access ->응용형 어플을 만둘 수 있다. 

Enterprise = class Database Systems
좀더 볼륨이 크게 제작이 되어있다.

DBMS Power vs Ease of user
Powr : 피티에스 로 성능을 본다. 
access는 form 등 편리한 기능을 제공한다.

ORQCLE SQL이 Tibera SQL로 바꿀때 많은 부분이 달라진다.
oracle -> tibero 로 바꿀때
SQL 표멧과 sQL문을 수정하는 일이 생긴다.

 DB의 설계의 이유는
 1. 레거시 데이터가 있을때 
 2. 데이터 마이그레이션
 3. 기존이ㅡ 데이터를 exiting / legacy data를 새로운 시스템으로 옮기는 경우 
 정규화를 한다

 db제설계에 맞딸드리는 문제는 
 db설계 문서가 없는 경우가 많다.
 table들의 집합을 가지고 거꾸로  
 levercy-enginering등이 있다.



 Database Desigin from Exsiting Data

 첫번째 케이스 디비x, erp o
 두번째  db리디자인 
 세번째새로 디자인하면서 분할 할것인지 안할것인지 

 정교화를 안하면 data가 더러워진다.

 백지상태의 db
 
 데이터 모델링의 er모델링한다.

 처음으로 db를 만들때, forms - Reports - user Requiremnet status ments , use Cmase and Other 
// PAGE 1-38

database desigin = 스키마를 개선하는 역할을 한다.


Users 
- casual suer(end user)
 - canned application 이용::
 - interactive SQL이용

Application programmer
ESQL/C , ODBC , JDBC 등 프로그램 개발
DBA (DAtabase Administrator) : 데이터 베이스 관리ㅡ 모든 둰한 가점
Database Desiginer .

ER moddling수행
ESQL/cs :트정 언어를 만들어야 하다.


ESQL/C , ODBC 개발
특정 db에 들어간 부분은 odbc가 개발할때 오래거리지면 호환성이 높다.

db설계 처우 : 트윗컨설팅 


real-time db에 메인메모리를 채택
전화기교환국에 객체지환db가 등장하였다.
빠른속도로 지원을 해줘서 paradox 등이 나타남

RDB 시대
object를 지원 , object store - 오라이언 등등
객체지향 디비를 최초로 만들었다.

oodb가 rdb를 대체할까 했으나 통일되었다.
table과 object를 지원하는 모듈들이 많이 나왔다.


그때 나왔던 제품 중 unsql 와 일러스터가 나왔다.
멀티미디어 디비를 구축할때 일러스터 사용한다

oracle 도 ORDB로 속하게 되었다.

관계형 db는 ACID를 100%지원
NOSQL은 db를 ACID지원 : event 퍼슌트레이션


ACID바로 지원하지 못하면  ?

1장 요약 sql 소개 및 역사 

2장
Introduction to Structured Query Language 
Data language(데이터 언어)
DB를 정의 , 조작, 제어하기 위해 사용
DDL : (ㅇㅁㅅㅁ Definition Language) 데이터 정의
DML
DCL

데이터 언어

관계대수 기반
DBMS 내부용 , 질의 최적화 등 수행에 사용
DBMS 내부용, 질의 최적화 등 수행에 사용
관계 해석 기반
투플 해석식 기반으로 만든 언어가 postgresQL이다.

도메인 해석식 기반으로 만든 언어가 Micro soft Access Query이다. = > ACCESS 로 진화 (시각언어)

관계 매핑 기반언어는 SQL이다. 


버전1 query(씨퀄~) > 버전2 SQL -> IBM => ISO로 표준화

관계 대수 ** 쿼리 옵티마이즈에서 필요!
sql 쿼리 던졌을때 가장 빨리 수행하게 하는 방법 : 쿼러ㅣ 옵티마이즈(50프로) +  db엔진에서 프린트해서 나온 결과로 인텔리제이션을 사람이 메뉴얼하게 한다


sql은 선언적 언어이다.
관계대수는 how를 밝힌다. 튜닝 옵티마이저 - 튜닝 관리자의 도메인에 따라 영향을 미친다
쿼리프로세싱알고리즘 

 DDL : 스키마 = 테이블Create table, alter table (칼럼 추가, 칼럼의 variable을 바꾼다), drop table
 create view , drop view
 create index, drop index

 DML
 Select from where 검색
 Insert into 삽입
 Delete from 삭제
 Update set 갱신



Select from * :전체 검색 
inforamed contact - 내가 원하는 결과만 뽑을 수 있다.
view는 virtual table이다.
phiscal 테이블이 있다면 그대로 virtual table을 복사해 붙여놓는다.

view - 사용의 편의성 / 보안의 목적 (public)

index는 장단점이 있다. 검색은 빨라지나 stoarge overhaed가 커진다. 삽입 삭제는 느려질 수 있다. : B트리 balanced - 마지막 leaf 노드를 해결하는데 어렵다.
작은 relation은 index를 만드는게 오히려 성능을 떨어트린다.
자주 업데이트 되는 값은 예 - 은행계좌 index를 만들지 않는게 좋다

DCL 제어기능주로 데이터 제어용 , 주로 DBA나 응용프로그래머가 사용
보안 , 권한 부여
Grant to, revoke from동시성 제어기능 lock , unlock 회복 commit , rollback

lock 데이터를 잠금으로싸 ㄷ동시성을 제어 , 다른 트렌젝션은 업데이트 하지 못하도록 한다.
DB엔진이 자동적으로 lock을 해준다. 프로그래머가 직접 lock 명령어를 했다면 explict lock 명시적 락 vs 암시적 락
 lock이 꼬이면 dead lock이 되고 그럼 rollback으로 살린다

 commit 을 해야 디비에 영구적으로 남는다.

transition 은 automic하기 때문에 
rollback은 모두 취소하고 nothing으로 돌아가게 해준다.


PAGE 32

SQL은 data sublanguage이다.
프로그래밍 안에서 sql을 사용할 수 있다.

* Sequences 폴더 : 일령번호 자동 생성
* Views : 가상 테이블 폴더

SQL DDL and DML

34페이지 example cape codd outdoor sports

extraction : 요약데이터

운영 데이터에서 뽑아내는 도구
explictExtract
Transer
Load
         help
staging area : 온라인 db에서 staging area로 

Micro ACESS (데이터 생성)=> sql 서버로 옮겨서 분석 작업을 한다.
예시 테이블 3가지 
retail-order 
order-item
sku-data (상품명)

PAGE 2-37 
SELECT *  : * 표시는 전체를 뜻한다
FROM ORDER_ITEM : from 뒤 아이템 기준으로 sorting 한다
ORDER BY PRICE DESC , ORDERNUMBER ASC; : DESC 는 내림차순 (큰 수 -> 작은수) , ASC 는 오름차순 (작은 수 -> 큰 수)

결과 :
price 를 첫번째 기준으로 300달러 => 50달러 내림차순 

OrderNumber를 두번째 기준으로 같은 Price 기준에서 1000 , 3000 (300달러) 2000, 2000, 3000, 3000 (50달러) 오름차순

PAGE 2-38
SELECT *
FROM SKU_DATA
WEHRE Department = 'Water Sports'
AND Buyer = 'Nancy Meyers'

AND 구문 = 두 조건을 기준으로 두 조건이 모두 해당하는 아이템을 sorting한다.
결과 : Department 와 Buyer 가 각각 Water Sports, Nency Meyers에 해당하는 SKU_DATA를 찾는다.

PAGE 2-39
SELECT *
FROM SKU_DATA
WHERE Department = 'Camping'
OR Department = 'climbing';

OR 구문 = Wheare 절 안에 있는 한 조건 이상 만족시키는 아이템 모두를 sorting 한다.
결과 : Department 가 Camping 이랑 climbing 인 아이템 모두를 SKU_DATA 에서 찾는다.

PAGE 2- 40
SELECT *
FROM SKU_DATA
WHERE Buyer IN ('Nancy Meyers' , 'Cindy Lo' , 'Jerry Martin');

IN 구문 - OR 대신 IN을  / OR을 하나의 표현으로 간단히 표현 , 즉 WHERE Buyer='Nancy Meyers' OR Buyer='Cindy Lo' OR Buyer='Jerry Martin' 와 같다

결과 Buyer 가 각 이름에 해당하는 SKU_DATA 를 sorting 한다.

PAGE 2- 41
SELECT *
FROM SKU_DATA
WHERE Buyer NOT IN ('Nancy Meyers' , 'Cindy Lo' , 'Jerry Martin');

결과 : Buyer 가 'Nancy Meyers' , 'Cindy Lo' , 'Jerry Martin' 에 해당하지 않는 사람을 기준으로 매칭되는 SKU_DATA를 구한다


PAGE 2-42
SELECT *
FROM ORDER_ITEM
WHERE ExtendedPrice
      BETWEEN 100 AND 200;

BETWEEN 구문은 범위를 가리킨다. 100 이상 200 이하
결과 ExtendedPrice가 100 이상 200 이하에 해당하는 ORDER_ITEM을 구한다

PAGE 2-43
SELECT *
FROM ORDER_ITEM
WHERE ExtendedPrice >= 100
AND   ExtendedPrice <= 200;

BETWEEN 100 AND 200과 같은 의미이다.

PAGE 2-44
**Like 와일드카이드가 SQLinjection attack 노출에 위험할 수 있다. 보안에 조심해야 할 필요가 있다.
keyword LIKE can be combined with wildcard symbols :

SQL Server , Oracle
_ = Exactly one character
% = Any set of Zero or more characters : 0개 이상의 임의의 숫자

MS ACCESS
? = Exactly one character
* = Any set of Zero or more characters

PAGE 2-45
SELECT *
FROM SKU_DATA
WHERE Buyer Like 'Pete%'; 

** %는 반드시 LIKE와 같이 사용한다.
결과 : Buyer 이름에 Pete가 들어가는 이름이 있다면 그 이름과 SKU_DATA를 매칭한다.

PAGE 2-46
WHERE Clause Options - Like and Wildcards

SELECT *
FROM SKU_DATA
WHERE SKU_Descripton Like '%Tent%';
결과 : SKU_Desciption 에 Tent 키워드가 들어가있는 행을 필터링한다.

PAGE 2-47
SELECT *
FROM SKU_DATA
WHERE SKU LIKE '%2__';
(_ 언더바가 2개 들어가있음)
결과 : 뒤에서 3번째 글자가 2로 시작하는 SKU 데이터를 필터링한다.

PAGE 2-48
SQL Built-in 함수 기능으로 COUNT / SUM / AVG / MIN / Max 가 있다

PAGE 2-49
SELECT SUM(ExtendedPrice) AS Order3000Sum
FROM ORDER_ITEM
WHERE OrderNumber = 3000;

결과 : ORDER_ITEM 에서 ordernumber 값 이 3000일때의 모든 값을 더해 Order3000Sum으로 이름을 정한다.
AS 키로 칼럼 이름을 바꿀 수 있다. (오라클과 sql srver 각각 다르다)

PAGE 2-50
SELECT SUM (ExtendedPrice) AS OrderItemSum,
      AVG SUM (ExtendedPrice) AS OrderItemAvg,
      MIN SUM (ExtendedPrice) AS OrderItemMin,
      MAX SUM (ExtendedPrice) AS OrderItemMax 
FROM ORDER_ITEM;

결과 : ORDER_ITEM 에서 AS 뒤의 이름 변수로 각각 SUM , AVG , MIN, MAX 값을 구한다.

PAGE 2-51
SELECT COUNT(*) AS NumberOfRows
FROM ORDER_ITEM;

결과 : ORDER_ITEM 의 갯수를 NumberofRows 이름으로 구한다. 개수는 7개 있다.

PAGE 2-52
SELECT COUNT (DISTINCT Department) AS DeptCount
FROM SKU_DATA;

결과 : SKU_DATA 칼럼에서 Department 에 해당하는 값 중 중복되는 값을 제외한 행 수를 DeptCount 변수로 구한다. 그 값은 3개이다.

PAGE 2-54

